using System;
using Microsoft.Extensions.Caching.Memory;
using pentest_challenge.Contracts;
using pentest_challenge.Helpers;

namespace pentest_challenge.Models
{
    public class TokenInformation
    {
        public const string CookieTokenKey = "GS2W_Cookie"; // no better place for now
        public readonly bool IsAdmin;
        public readonly string User;

        public TokenInformation(string user, bool isAdmin)
        {
            IsAdmin = isAdmin;
            User = user;
        }
    }

    public class TokenStorage : ITokenStorage
    {
        private static MemoryCache _cache;

        public TokenStorage()
        {
            _cache = new MemoryCache(new MemoryCacheOptions()
            {
                ExpirationScanFrequency = TimeSpan.FromMinutes(5),
                SizeLimit = (long) 2 * 1024 * 1024 * 1024 // 2 GB
            });
        }

        public bool Store(string token, string user, bool isAdmin)
        {
            if (!IsToken(token))
            {
                return false;
            }

            var tokenInformation = new TokenInformation(user, isAdmin);

            _cache.Set(token, tokenInformation, TimeSpan.FromDays(5));
            return true;
        }

        public TokenInformation Check(string token) => _cache.Get<TokenInformation>(token);

        public bool IsToken(string token) => token.Length == TokenGenerator.TokenSizeInBytes;

        public bool Invalidate(string token)
        {
            var existed = _cache.Get<TokenInformation>(token);
            _cache.Remove(token);
            return existed != null;
        }
    }
}